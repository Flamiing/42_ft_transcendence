version: '3.8'

networks:
  transcendence:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ./.docker-volume-mnt/postgres_data
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ./.docker-volume-mnt/prometheus_data
      o: bind
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ./.docker-volume-mnt/grafana_data
      o: bind
  elastic-data:
    driver: local
    driver_opts:
      type: none
      device: ./.docker-volume-mnt/elastic_data
      o: bind
  common-log-data:
    driver: local
    driver_opts:
      type: none
      device: ./.docker-volume-mnt/commonlog_data
      o: bind
  nginx-logs-data:
    driver: local
    driver_opts:
      type: none
      device: ./.docker-volume-mnt/nginx-logs-data
      o: bind


services:
# Enrtypoint
  nginx:
    build: ./nginx
    container_name: nginx
    restart: "unless-stopped"
    networks:
      - transcendence
    ports:
      - 80:80
      - 443:443
      - 3000:3000
      - 5601:5601
    env_file:
      - .env
    volumes:
      - nginx-logs-data:/var/log/nginx

# Backend
  django:
    container_name: django
    restart: "unless-stopped"
    build: ./django
    networks:
      - transcendence
    depends_on:
      - postgres
    env_file:
      - .env
    volumes:
      - ./django/src:/home/
      - common-log-data:/var/log/django/

# DB
  postgres:
    container_name: postgres
    restart: "unless-stopped"
    image: postgres:12-bullseye
    networks:
      - transcendence
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

# Monitoring
  prometheus:
    container_name: prometheus
    image:  prom/prometheus:v2.47.2
    restart: "unless-stopped"
    networks:
      - transcendence
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.size=100MB"
      - "--storage.tsdb.retention.time=5d"

  grafana:
    build: ./grafana
    container_name: grafana
    env_file:
      - .env
    networks:
      - transcendence
    volumes:
      - grafana-data:/var/lib/grafana

    restart: "unless-stopped"

# Exporters
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    restart: "unless-stopped"
    depends_on:
      - postgres
    networks:
      - transcendence
    env_file:
      - .env

  es-exporter:
    image: prometheuscommunity/elasticsearch-exporter:v1.6.0
    container_name: es-exporter
    command:
      - '--es.uri=http://elasticsearch:9200'
    restart: "unless-stopped"
    depends_on:
      - setup
      - elasticsearch
      - kibana
      - logstash
    networks:
      - transcendence
    env_file:
      - .env

# ELK
  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: elasticsearch
    restart: "unless-stopped"
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - elastic-data:/usr/share/elasticsearch/data/
    networks:
      - transcendence
    env_file:
      - .env
    mem_limit: 1GB

  logstash:
    image: logstash:8.11.1
    container_name: logstash
    restart: "unless-stopped"
    volumes:
    - ./logstash/config:/usr/share/logstash/config:ro
    - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    - common-log-data:/var/log/django/:ro
    - nginx-logs-data:/var/log/nginx/:ro
    depends_on:
      - elasticsearch
    env_file:
      - .env
    networks:
      - transcendence
    mem_limit: 1GB

  kibana:
    image: kibana:8.11.1
    container_name: kibana
    restart: "unless-stopped"
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    env_file:
      - .env
    depends_on:
      - elasticsearch  
    networks:
      - transcendence

  setup:
    container_name: setup
    build: ./setup
    depends_on:
      - elasticsearch  
    restart: "no"
    networks:
      - transcendence
    env_file:
      - .env


# TODO remove
  adminer:
    container_name: adminer
    image: adminer:latest
    restart: "unless-stopped"
    depends_on:
      - postgres
    networks:
      - transcendence
    ports:
      - 9001:8080
    environment:
      - ADMINER_DEFAULT_SERVER=postgres

